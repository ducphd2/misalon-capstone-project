# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ErrorPayload {
  field: String
  message: [String!]
}

type PageMeta {
  total: Int
  totalPage: Int
  page: Int
  limit: Int
}

type Branch {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
  latitude: Float
  longitude: Float
}

type BranchEdge {
  node: Branch!
  cursor: String!
}

type Merchant {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  userId: ID
  branches: [Branch!]
}

type MerchantPaging {
  items: [Merchant!]
  meta: PageMeta
}

type Group {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  merchantId: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type Service {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  merchantId: Int
  groupId: Int
  price: Float
  initialPrice: Float
  capitalPrice: Float
  durationHour: Int
  durationMinute: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
  type: EServiceType
  showType: EServiceShowType
  canPrintableInvoice: Int
}

enum EServiceType {
  SERVICE
  PRODUCT
}

enum EServiceShowType {
  BOTH
  CASHIER
  BOOKING
  NONE
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

type Device {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  userId: ID!
  os: EDeviceOs!
  deviceId: String!
  token: String!
}

enum EDeviceOs {
  ANDROID
  IOS
}

type DevicePaging {
  items: [Device!]
  meta: PageMeta
}

type User {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  email: String
  fullName: String
  status: EUserStatus
  role: EUserRole!
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  dobDay: Float
  dobMonth: Float
  dobYear: Float
  occupation: String
  avatar: String
  address: String
  cityCode: Float
  districtCode: Float
  wardCode: Float
  phoneNumber: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: Float
  weight: Float
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
  latitude: Float
  longitude: Float
  merchants(q: String): MerchantPaging!
  devices: DevicePaging!
}

enum EUserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum EUserRole {
  USER
  ADMIN
  SUPER_ADMIN
  MASTER_WORKER
  ASSISTANT_WORKER
  MANAGER
  RECEPTIONIST
}

enum EUserGender {
  MALE
  FEMALE
  OTHER
}

enum ECustomerLevel {
  NORMAL
  SILVER
  GOLD
  PLATINUM
}

type UserPayload {
  errors: [ErrorPayload!]
  user: User
}

type UserPaging {
  items: [User!]
  meta: PageMeta
}

type SingleUpload {
  url: String!
  format: String!
  folder: String!
  width: Float!
  height: Float!
  bytes: Float!
}

type Booking {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
}

type BookingPayload {
  errors: [ErrorPayload!]
  booking: Booking
}

type DeleteBookingPayload {
  errors: [ErrorPayload!]
  count: Int
}

type ExtendResponseBooking {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
  customerEmail: String
  customerName: String
  customerAddress: String
}

type BookingPaginationResponse {
  items: [ExtendResponseBooking!]
  page: Int
  totalPage: Int
  total: Int
  limit: Int
}

type ResponseAuthGrpc {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type Query {
  getUsersByMerchant(merchantId: Float!, q: String, limit: Float, page: Float, orderBy: String, orderDirection: ESortDirection): UserPaging!
  getUser(id: Float!): UserPayload!
  userCount(q: String): Float!
  me: UserPayload!
  findAllBooking(q: String, limit: Float, page: Float, orderBy: String, orderDirection: ESortDirection): BookingPaginationResponse!
}

enum ESortDirection {
  ASC
  DESC
}

type Mutation {
  uploadSingleFiles(file: Upload!, folder: String): SingleUpload!
  uploadMultipleFiles(folder: String, files: [Upload!]!): [SingleUpload!]!
  login(data: InputLoginRequest!): ResponseAuthGrpc!
  register(user: CreateUserInputDto!, merchant: CreateMerchantInputDto, device: DeviceInputDto): ResponseAuthGrpc!
  logout: Boolean!
  addOperator(user: AddOperatorDto!): UserPayload!
  addCustomer(user: AddCustomerDto!): UserPayload!
  updateCustomer(id: Float!, user: UpdatePartialCustomer!): UserPayload!
  updateUser(id: Float!, data: UpdatePartialUser!): UserPayload!
  createBooking(data: CreateBookingInput!): BookingPayload!
  customerCreateBooking(data: CreateBookingInput!): BookingPayload!
  updateBooking(id: Float!, data: PartialUpdateBooking!): BookingPayload!
  deleteBooking(id: Float!): DeleteBookingPayload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input InputLoginRequest {
  email: String!
  password: String!
  device: DeviceInputDto
}

input DeviceInputDto {
  os: EDeviceOs!
  deviceId: String!
  token: String!
}

input CreateUserInputDto {
  """Email of user"""
  email: String!
  password: String!
  fullName: String
  role: EUserRole = USER
  status: EUserStatus
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

input CreateMerchantInputDto {
  name: String!
  address: String!
  phone: String!
  subdomain: String!
  cityCode: Int
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

input AddOperatorDto {
  email: String!
  password: String!
  fullName: String!
  role: EUserRole! = MASTER_WORKER
  merchantId: Int!
  branchId: Int!
  status: EUserStatus
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
}

input AddCustomerDto {
  merchantId: Int!
  email: String
  password: String
  fullName: String!
  role: EUserRole! = USER
  status: EUserStatus
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  phoneNumber: String!
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

input UpdatePartialCustomer {
  merchantId: Int
  email: String
  password: String
  fullName: String
  role: EUserRole = USER
  status: EUserStatus
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  phoneNumber: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

input UpdatePartialUser {
  """Email of user"""
  email: String
  password: String
  fullName: String
  role: EUserRole = USER
  status: EUserStatus
  gender: EUserGender
  level: ECustomerLevel
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

input CreateBookingInput {
  name: String
  phone: String
  address: String
  branchId: Int
  serviceId: Int
  cityCode: Int
  status: EBookingStatus = PENDING
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

enum EBookingStatus {
  PENDING
  APPROVE
  CANCELLED
  REJECT
}

input PartialUpdateBooking {
  name: String
  phone: String
  address: String
  branchId: Int
  serviceId: Int
  cityCode: Int
  status: EBookingStatus = PENDING
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}