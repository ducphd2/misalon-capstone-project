# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ErrorPayload {
  field: String
  message: [String!]
}

type DeletePayload {
  errors: [ErrorPayload!]
  count: Int
}

type Branch {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
}

type BranchEdge {
  node: Branch!
  cursor: String!
}

type BranchConnection {
  edges: [BranchEdge!]!
  pageInfo: PageInfo!
}

type BranchesConnection {
  branches: [Branch!]!
}

type Merchant {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  userId: ID
  branches(q: String): [Branch!]!
}

type MerchantEdge {
  node: Merchant!
  cursor: String!
}

type MerchantsConnection {
  merchants: [Merchant!]
}

type Group {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  merchantId: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type GroupConnection {
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}

type Service {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  merchantId: Int
  groupId: Int
  price: Float
  initialPrice: Float
  capitalPrice: Float
  durationHour: Int
  durationMinute: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
  type: EServiceType
  showType: EServiceShowType
  canPrintableInvoice: Int
}

enum EServiceType {
  SERVICE
  PRODUCT
}

enum EServiceShowType {
  BOTH
  CASHIER
  BOOKING
  NONE
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

type ServiceConnection {
  edges: [ServiceEdge!]!
  pageInfo: PageInfo!
}

type ServiceOffsetPagination {
  items: [Service!]
  page: Int
  totalPage: Int
  total: Int
  limit: Int
}

type User {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  email: String!
  fullName: String
  status: EUserStatus
  role: EUserRole!
  gender: EUserGender
  contact: String
  dobDay: Float
  dobMonth: Float
  dobYear: Float
  occupation: String
  avatar: String
  address: String
  cityCode: Float
  districtCode: Float
  merchants(q: String): [Merchant!]!
}

enum EUserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum EUserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum EUserGender {
  MALE
  FEMALE
  OTHER
}

type UserEdge {
  node: User!
  cursor: String!
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserPayload {
  errors: [ErrorPayload!]
  user: User
}

type SingleUpload {
  url: String!
  format: String!
  folder: String!
  width: Float!
  height: Float!
  bytes: Float!
}

type Booking {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
}

type BookingPayload {
  errors: [ErrorPayload!]
  booking: Booking
}

type DeleteBookingPayload {
  errors: [ErrorPayload!]
  count: Int
}

type ExtendResponseBooking {
  id: Int!
  createdAt: String
  updatedAt: String
  deletedAt: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  merchantId: Int
  city: String
  district: String
  ward: String
  customerEmail: String
  customerName: String
  customerAddress: String
}

type BookingPaginationResponse {
  items: [ExtendResponseBooking!]
  page: Int
  totalPage: Int
  total: Int
  limit: Int
}

type ResponseAuthGrpc {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type Query {
  getUsers(q: String, first: Float, last: Float, before: String, after: String, orderBy: String): UsersConnection!
  getUser(id: Float!): UserPayload!
  userCount(q: String): Float!
  me: UserPayload!
  findMerchantById(id: Float!): Merchant!
  findAllMerchants(q: String): MerchantsConnection!
  findAllMerchantsByAdmin(q: String): MerchantsConnection!
  findBranchById(id: Float!): Group!
  findAllBranches(q: String): BranchesConnection!
  findAllBranchesByMerchant(merchantId: Float!, q: String): BranchConnection!
  findAllBranchesByAdmin(q: String): BranchConnection!
  findAllServiceGroups(q: String): GroupConnection!
  findServiceById(id: Float!): Service!
  findAllBranchServices(q: String): ServiceConnection!
  findAllBranchServicesByMerchant(merchantId: Float!, q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): ServiceOffsetPagination!
  customerFindAllServices(q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): ServiceOffsetPagination!
  findAllBooking(q: String, limit: Float, page: Float, orderBy: String, orderDirection: String): BookingPaginationResponse!
}

type Mutation {
  uploadSingleFiles(file: Upload!, folder: String): SingleUpload!
  uploadMultipleFiles(folder: String, files: [Upload!]!): [SingleUpload!]!
  login(data: BaseAuthInput!): ResponseAuthGrpc!
  customerLogin(data: InputLoginRequest!): ResponseAuthGrpc!
  register(user: CreateUserInputDto!, merchant: CreateMerchantInputDto!, device: DeviceInputDto): ResponseAuthGrpc!
  logout: Boolean!
  updatePassword(data: ChangePasswordInput!): UserPayload!
  createCustomer(user: CreateUserInputDto!, device: DeviceInputDto): UserPayload!
  updateUser(id: Float!, data: UpdatePartialUser!): UserPayload!
  deleteCustomer(id: Float!): DeletePayload!
  createMerchant(data: CreateMerchantInput!): Merchant!
  createBranch(data: CreateBranchInput!): Branch!
  updateBranch(id: Float!, data: PartialUpdateBranch!): Branch!
  deleteBranch(id: Float!): DeletePayload!
  createGroup(data: CreateGroupInput!): Group!
  updateGroup(id: Float!, data: PartialUpdateGroup!): Group!
  deleteGroup(id: Float!): DeletePayload!
  createService(data: CreateGroupInput!): Service!
  updateService(id: Float!, data: PartialUpdateService!): Service!
  deleteService(id: Float!): DeletePayload!
  createBooking(data: CreateBookingInput!): BookingPayload!
  customerCreateBooking(data: CreateBookingInput!): BookingPayload!
  updateBooking(id: Float!, data: PartialUpdateBooking!): BookingPayload!
  deleteBooking(id: Float!): DeleteBookingPayload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BaseAuthInput {
  email: String!
  password: String!
}

input InputLoginRequest {
  email: String!
  password: String!
  device: DeviceInputDto
}

input DeviceInputDto {
  os: EDeviceOs!
  deviceId: String!
  token: String!
}

enum EDeviceOs {
  ANDROID
  IOS
}

input CreateUserInputDto {
  """Email of user"""
  email: String!
  password: String!
  fullName: String!
  role: EUserRole = USER
  actionRole: EActionRole = MANAGER
  status: EUserStatus = ACTIVE
  gender: EUserGender = FEMALE
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  level: ECustomerLevel
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

enum EActionRole {
  MANAGER
  RECEPTIONIST
  MASTER_WORKER
  ASSISTANT_WORKER
}

enum ECustomerLevel {
  NORMAL
  SILVER
  GOLD
  PLATINUM
}

input CreateMerchantInputDto {
  name: String!
  address: String!
  phone: String!
  subdomain: String!
  cityCode: Int
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input UpdatePartialUser {
  """Email of user"""
  email: String
  password: String
  fullName: String
  role: EUserRole = USER
  actionRole: EActionRole = MANAGER
  status: EUserStatus = ACTIVE
  gender: EUserGender = FEMALE
  contact: String
  dobDay: Int
  dobMonth: Int
  dobYear: Int
  occupation: String
  avatar: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: String
  level: ECustomerLevel
  referrer: String
  referrerCode: String
  customerCode: String
  facebook: String
  zaloPhone: String
  height: String
  weight: String
  memberCardNo: String
  company: String
  taxNo: String
  note: String
  relatedUser: String
  relatedUserRole: String
  relatedUserPhone: String
  branchId: Int
}

input CreateMerchantInput {
  name: String
  phone: String
  address: String
  cityCode: Int
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

input CreateBranchInput {
  name: String
  phone: String
  address: String
  merchantId: Int
  cityCode: Int
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

input PartialUpdateBranch {
  name: String
  phone: String
  address: String
  merchantId: Int
  cityCode: Int
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

input CreateGroupInput {
  merchantId: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
}

input PartialUpdateGroup {
  merchantId: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
}

input PartialUpdateService {
  merchantId: Int
  groupId: Int
  price: Float
  initialPrice: Float
  capitalPrice: Float
  durationHour: Int
  durationMinute: Int
  sku: String
  code: String
  name: String
  description: String
  image: String
  type: EServiceType
  showType: EServiceShowType
  canPrintableInvoice: Int
}

input CreateBookingInput {
  name: String
  phone: String
  address: String
  branchId: Int
  serviceId: Int
  cityCode: Int
  status: EBookingStatus = PENDING
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}

enum EBookingStatus {
  PENDING
  APPROVE
  CANCELLED
  REJECT
}

input PartialUpdateBooking {
  name: String
  phone: String
  address: String
  branchId: Int
  serviceId: Int
  cityCode: Int
  status: EBookingStatus = PENDING
  districtCode: Int
  wardCode: Int
  city: String
  district: String
  ward: String
}